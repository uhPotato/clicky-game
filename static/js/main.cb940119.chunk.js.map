{"version":3,"sources":["components/MatchCard/MatchCard.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["MatchCard","props","react_default","a","createElement","onClick","setClicked","id","className","alt","name","src","image","Wrapper","children","Title","correctGuesses","bestScore","clickMessage","App","state","matches","_this","clickedMatch","filter","match","clicked","console","log","i","length","setState","sort","b","Math","random","_this2","this","components_Wrapper_Wrapper","components_Title_Title","map","components_MatchCard_MatchCard","key","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"u+BAYeA,SATG,SAAAC,GAAK,OAEpBC,EAAAC,EAAAC,cAAA,OAAKC,QAAS,kBAAMJ,EAAMK,WAAWL,EAAMM,KAAKC,UAAU,iBACzDN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACdN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCFvBC,SAFC,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WAAWP,EAAMa,YCE1CC,SAFD,SAAAd,GAAK,OAAIC,EAAAC,EAAAC,cAAA,MAAII,UAAU,SAASP,EAAMa,mBCIhDE,SAAiB,GACjBC,EAAY,EACZC,EAAe,6DAyHJC,6MApHXC,MAAQ,CACJC,UACAL,iBACAC,YACAC,kBAGJZ,WAAa,SAAAC,GAGT,IAAMc,EAAUC,EAAKF,MAAMC,QAGrBE,EAAeF,EAAQG,OAAO,SAAAC,GAAK,OAAIA,EAAMlB,KAAOA,IAI1D,GAAIgB,EAAa,GAAGG,QAAQ,CAExBC,QAAQC,IAAK,oBAAsBZ,GACnCW,QAAQC,IAAK,eAAiBX,GAE9BD,EAAiB,EACjBE,EAAe,0CAEf,IAAK,IAAIW,EAAI,EAAIA,EAAIR,EAAQS,OAASD,IAClCR,EAAQQ,GAAGH,SAAU,EAGzBJ,EAAKS,SAAS,CAACb,iBACfI,EAAKS,SAAS,CAAEf,mBAChBM,EAAKS,SAAS,CAACV,iBAGZ,GAAIL,EAAiB,GAGxBO,EAAa,GAAGG,SAAU,EAK1BR,EAAe,0DAFfF,EAIqBC,IACjBA,EAAYD,EACZM,EAAKS,SAAS,CAAEd,eAIpBI,EAAQW,KAAK,SAAS7B,EAAG8B,GAAG,MAAO,GAAMC,KAAKC,WAG9Cb,EAAKS,SAAS,CAAEV,YAChBC,EAAKS,SAAS,CAACf,mBACfM,EAAKS,SAAS,CAACb,qBACZ,CAGHK,EAAa,GAAGG,SAAU,EAG1BV,EAAiB,EAGjBE,EAAe,0DACfD,EAAY,GACZK,EAAKS,SAAS,CAAEd,cAEhB,IAAK,IAAIY,EAAI,EAAIA,EAAIR,EAAQS,OAASD,IAClCR,EAAQQ,GAAGH,SAAU,EAIzBL,EAAQW,KAAK,SAAS7B,EAAG8B,GAAG,MAAO,GAAMC,KAAKC,WAG9Cb,EAAKS,SAAS,CAAEV,YAChBC,EAAKS,SAAS,CAACf,mBACfM,EAAKS,SAAS,CAACb,2FAKd,IAAAkB,EAAAC,KACL,OACInC,EAAAC,EAAAC,cAACkC,EAAD,KACIpC,EAAAC,EAAAC,cAACmC,EAAD,gCAEArC,EAAAC,EAAAC,cAAA,MAAII,UAAU,gBACT6B,KAAKjB,MAAMF,cAGhBhB,EAAAC,EAAAC,cAAA,MAAII,UAAU,4BAAd,oBACsB6B,KAAKjB,MAAMJ,eAC7Bd,EAAAC,EAAAC,cAAA,WAFJ,eAGiBiC,KAAKjB,MAAMH,WAE5Bf,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACfN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACd6B,KAAKjB,MAAMC,QAAQmB,IAAI,SAAAf,GAAK,OACzBvB,EAAAC,EAAAC,cAACqC,EAAD,CACInC,WAAY8B,EAAK9B,WACjBC,GAAIkB,EAAMlB,GACVmC,IAAKjB,EAAMlB,GACXK,MAAOa,EAAMb,oBA5GnB+B,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,2DCVNuB,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.cb940119.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./MatchCard.css\";\r\n\r\nconst MatchCard = props => (\r\n\r\n\t\t\t<div onClick={() => props.setClicked(props.id)} className=\"card col-md-3\">\r\n\t\t\t\t<div className=\"img-container\">\r\n\t\t\t\t\t<img alt={props.name} src={props.image} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n);\r\n\r\nexport default MatchCard;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\r\n\r\nexport default Title;","import React, { Component } from \"react\";\nimport MatchCard from \"./components/MatchCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport matches from \"./matchcards.json\";\nimport \"./App.css\";\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Click on a card! Click on the same one twice and you lose!\";\n\nclass App extends Component {\n    \n    // Setting this.state.matches to the matches json array\n    state = {\n        matches,\n        correctGuesses,\n        bestScore,\n        clickMessage\n    };\n\n    setClicked = id => {\n\n        // Make a copy of the state matches array to work with\n        const matches = this.state.matches;\n\n        // Filter for the clicked match\n        const clickedMatch = matches.filter(match => match.id === id);\n\n        // If the matched image's clicked value is already true, \n        // do the game over actions\n        if (clickedMatch[0].clicked){\n\n            console.log (\"Correct Guesses: \" + correctGuesses);\n            console.log (\"Best Score: \" + bestScore);\n\n            correctGuesses = 0;\n            clickMessage = \"Woops! You already clicked on this one.\"\n\n            for (let i = 0 ; i < matches.length ; i++){\n                matches[i].clicked = false;\n            }\n\n            this.setState({clickMessage});\n            this.setState({ correctGuesses });\n            this.setState({matches});\n\n        // Otherwise, if clicked = false, and the user hasn't finished\n        } else if (correctGuesses < 11) {\n\n            // Set its value to true\n            clickedMatch[0].clicked = true;\n\n            // increment the appropriate counter\n            correctGuesses++;\n            \n            clickMessage = \"Great! You haven't click on that one yet! Keep going!\";\n\n            if (correctGuesses > bestScore){\n                bestScore = correctGuesses;\n                this.setState({ bestScore });\n            }\n\n            // Shuffle the array to be rendered in a random order\n            matches.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.matches equal to the new matches array\n            this.setState({ matches });\n            this.setState({correctGuesses});\n            this.setState({clickMessage});\n        } else {\n\n            // Set its value to true\n            clickedMatch[0].clicked = true;\n\n            // restart the guess counter\n            correctGuesses = 0;\n\n            // Egg on the user to play again\n            clickMessage = \"WOW!!! You got ALL of them!!! But, can you do it again?\";\n            bestScore = 12;\n            this.setState({ bestScore });\n            \n            for (let i = 0 ; i < matches.length ; i++){\n                matches[i].clicked = false;\n            }\n\n            // Shuffle the array to be rendered in a random order\n            matches.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.matches equal to the new matches array\n            this.setState({ matches });\n            this.setState({correctGuesses});\n            this.setState({clickMessage});\n\n        }\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <Title>Super Smash Clicky Game</Title>\n        \n                <h3 className=\"scoreSummary\">\n                    {this.state.clickMessage}\n                </h3>\n                \n                <h3 className=\"scoreSummary card-header\">\n                    Correct Guesses: {this.state.correctGuesses} \n                    <br />\n                    Best Score: {this.state.bestScore} \n                </h3>\n                <div className=\"container\">\n                <div className=\"row\">\n                {this.state.matches.map(match => (\n                    <MatchCard\n                        setClicked={this.setClicked}\n                        id={match.id}\n                        key={match.id}\n                        image={match.image}\n                    />\n                ))}\n                </div>\n                </div>\n\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\n"],"sourceRoot":""}